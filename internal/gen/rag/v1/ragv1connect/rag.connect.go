// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rag/v1/rag.proto

package ragv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/hsn0918/rag/internal/gen/rag/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RagServiceName is the fully-qualified name of the RagService service.
	RagServiceName = "rag.v1.RagService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RagServicePreUploadProcedure is the fully-qualified name of the RagService's PreUpload RPC.
	RagServicePreUploadProcedure = "/rag.v1.RagService/PreUpload"
	// RagServiceUploadPdfProcedure is the fully-qualified name of the RagService's UploadPdf RPC.
	RagServiceUploadPdfProcedure = "/rag.v1.RagService/UploadPdf"
	// RagServiceGetContextProcedure is the fully-qualified name of the RagService's GetContext RPC.
	RagServiceGetContextProcedure = "/rag.v1.RagService/GetContext"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	ragServiceServiceDescriptor          = v1.File_rag_v1_rag_proto.Services().ByName("RagService")
	ragServicePreUploadMethodDescriptor  = ragServiceServiceDescriptor.Methods().ByName("PreUpload")
	ragServiceUploadPdfMethodDescriptor  = ragServiceServiceDescriptor.Methods().ByName("UploadPdf")
	ragServiceGetContextMethodDescriptor = ragServiceServiceDescriptor.Methods().ByName("GetContext")
)

// RagServiceClient is a client for the rag.v1.RagService service.
type RagServiceClient interface {
	PreUpload(context.Context, *connect.Request[v1.PreUploadRequest]) (*connect.Response[v1.PreUploadResponse], error)
	UploadPdf(context.Context, *connect.Request[v1.UploadPdfRequest]) (*connect.Response[v1.UploadPdfResponse], error)
	GetContext(context.Context, *connect.Request[v1.GetContextRequest]) (*connect.Response[v1.GetContextResponse], error)
}

// NewRagServiceClient constructs a client for the rag.v1.RagService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRagServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RagServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ragServiceClient{
		preUpload: connect.NewClient[v1.PreUploadRequest, v1.PreUploadResponse](
			httpClient,
			baseURL+RagServicePreUploadProcedure,
			connect.WithSchema(ragServicePreUploadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		uploadPdf: connect.NewClient[v1.UploadPdfRequest, v1.UploadPdfResponse](
			httpClient,
			baseURL+RagServiceUploadPdfProcedure,
			connect.WithSchema(ragServiceUploadPdfMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getContext: connect.NewClient[v1.GetContextRequest, v1.GetContextResponse](
			httpClient,
			baseURL+RagServiceGetContextProcedure,
			connect.WithSchema(ragServiceGetContextMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// ragServiceClient implements RagServiceClient.
type ragServiceClient struct {
	preUpload  *connect.Client[v1.PreUploadRequest, v1.PreUploadResponse]
	uploadPdf  *connect.Client[v1.UploadPdfRequest, v1.UploadPdfResponse]
	getContext *connect.Client[v1.GetContextRequest, v1.GetContextResponse]
}

// PreUpload calls rag.v1.RagService.PreUpload.
func (c *ragServiceClient) PreUpload(ctx context.Context, req *connect.Request[v1.PreUploadRequest]) (*connect.Response[v1.PreUploadResponse], error) {
	return c.preUpload.CallUnary(ctx, req)
}

// UploadPdf calls rag.v1.RagService.UploadPdf.
func (c *ragServiceClient) UploadPdf(ctx context.Context, req *connect.Request[v1.UploadPdfRequest]) (*connect.Response[v1.UploadPdfResponse], error) {
	return c.uploadPdf.CallUnary(ctx, req)
}

// GetContext calls rag.v1.RagService.GetContext.
func (c *ragServiceClient) GetContext(ctx context.Context, req *connect.Request[v1.GetContextRequest]) (*connect.Response[v1.GetContextResponse], error) {
	return c.getContext.CallUnary(ctx, req)
}

// RagServiceHandler is an implementation of the rag.v1.RagService service.
type RagServiceHandler interface {
	PreUpload(context.Context, *connect.Request[v1.PreUploadRequest]) (*connect.Response[v1.PreUploadResponse], error)
	UploadPdf(context.Context, *connect.Request[v1.UploadPdfRequest]) (*connect.Response[v1.UploadPdfResponse], error)
	GetContext(context.Context, *connect.Request[v1.GetContextRequest]) (*connect.Response[v1.GetContextResponse], error)
}

// NewRagServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRagServiceHandler(svc RagServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ragServicePreUploadHandler := connect.NewUnaryHandler(
		RagServicePreUploadProcedure,
		svc.PreUpload,
		connect.WithSchema(ragServicePreUploadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ragServiceUploadPdfHandler := connect.NewUnaryHandler(
		RagServiceUploadPdfProcedure,
		svc.UploadPdf,
		connect.WithSchema(ragServiceUploadPdfMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ragServiceGetContextHandler := connect.NewUnaryHandler(
		RagServiceGetContextProcedure,
		svc.GetContext,
		connect.WithSchema(ragServiceGetContextMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/rag.v1.RagService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RagServicePreUploadProcedure:
			ragServicePreUploadHandler.ServeHTTP(w, r)
		case RagServiceUploadPdfProcedure:
			ragServiceUploadPdfHandler.ServeHTTP(w, r)
		case RagServiceGetContextProcedure:
			ragServiceGetContextHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRagServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRagServiceHandler struct{}

func (UnimplementedRagServiceHandler) PreUpload(context.Context, *connect.Request[v1.PreUploadRequest]) (*connect.Response[v1.PreUploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rag.v1.RagService.PreUpload is not implemented"))
}

func (UnimplementedRagServiceHandler) UploadPdf(context.Context, *connect.Request[v1.UploadPdfRequest]) (*connect.Response[v1.UploadPdfResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rag.v1.RagService.UploadPdf is not implemented"))
}

func (UnimplementedRagServiceHandler) GetContext(context.Context, *connect.Request[v1.GetContextRequest]) (*connect.Response[v1.GetContextResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rag.v1.RagService.GetContext is not implemented"))
}
